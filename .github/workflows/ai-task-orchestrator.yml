name: AI Task Orchestrator
# T017: Main orchestration logic, spawns children if needed

on:
  repository_dispatch:
    types: [orchestrate_task]

# Concurrency control per issue
concurrency:
  group: orchestrator-issue-${{ github.event.client_payload.issue_number }}
  cancel-in-progress: false

jobs:
  orchestrate:
    name: Orchestrate Task
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Constitution: parallel task < 10 min

    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Make scripts executable
        run: |
          chmod +x scripts/bash/*.sh
          chmod +x scripts/python/*.py

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create or update status comment
        id: status
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          # Create or find status comment
          STATUS_COMMENT_ID=$(./scripts/bash/update_status_comment.sh \
            "${{ github.event.client_payload.issue_number }}" \
            "initializing" \
            "Setting up environment...")
          echo "STATUS_COMMENT_ID=$STATUS_COMMENT_ID" >> $GITHUB_ENV
          echo "status_comment_id=$STATUS_COMMENT_ID" >> $GITHUB_OUTPUT

          # Create parent branch to prevent race condition with child PRs
          PARENT_BRANCH="gitaiteams/issue-${{ github.event.client_payload.issue_number }}"
          echo "Creating parent branch: $PARENT_BRANCH"
          git checkout -b "$PARENT_BRANCH" origin/main
          git push origin "$PARENT_BRANCH" 2>/dev/null || echo "Parent branch may already exist"

      - name: Process task with Claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          claude_args: |
            --allowed-tools Bash(git:*) Bash(gh:*) Bash(./scripts/*) Read Write Edit
          prompt: |
            You are the GitAI Teams orchestrator for issue #${{ github.event.client_payload.issue_number }}.

            Task from user:
            """
            ${{ github.event.client_payload.task }}
            """

            STATUS COMMENT ID: ${{ env.STATUS_COMMENT_ID }}

            Your responsibilities:
            1. Analyze if the task needs parallelization (use scripts/python/analyze_task.py if it exists)
            2. For single tasks: Execute directly and post results to the issue
            3. For parallel tasks: Create child branches and spawn child agents

            CRITICAL STATUS UPDATE RULES - MUST FOLLOW:
            - NEVER create new issue comments for status updates
            - ALWAYS use ./scripts/bash/update_status_comment.sh for ALL status updates
            - The status comment already exists (ID: ${{ env.STATUS_COMMENT_ID }})
            - Only use gh issue comment for FINAL RESULTS, not status

            For single tasks:
            - Update status: ./scripts/bash/update_status_comment.sh ${{ github.event.client_payload.issue_number }} "processing" "Executing task directly..."
            - Process the task
            - Track execution time using: START_TIME=$(date +%s%3N)
            - Update status when done: ./scripts/bash/update_status_comment.sh ${{ github.event.client_payload.issue_number }} "completed" "Task completed successfully"
            - Post FINAL RESULTS using scripts/bash/post_comment.sh:
            ```bash
            END_TIME=$(date +%s%3N)
            EXEC_TIME=$((END_TIME - START_TIME))
            ./scripts/bash/post_comment.sh result ${{ github.event.client_payload.issue_number }} "Your results here" $EXEC_TIME 0
            ```

            For parallel tasks requiring children:
            1. Parent branch gitaiteams/issue-${{ github.event.client_payload.issue_number }} already exists (created above)
            2. Update status: ./scripts/bash/update_status_comment.sh ${{ github.event.client_payload.issue_number }} "analyzing" "Determining task approach..."
            3. Update status: ./scripts/bash/update_status_comment.sh ${{ github.event.client_payload.issue_number }} "spawning" "Creating child agents..." "gitaiteams/issue-${{ github.event.client_payload.issue_number }}"
            4. For each subtask, spawn a child using:
            ```bash
            gh api /repos/${{ github.repository }}/dispatches \
              --method POST \
              --field event_type=child_task \
              --field client_payload[issue_number]=${{ github.event.client_payload.issue_number }} \
              --field client_payload[parent_branch]=gitaiteams/issue-${{ github.event.client_payload.issue_number }} \
              --field client_payload[child_number]=1 \
              --field client_payload[task]="Subtask description" \
              --field client_payload[status_comment_id]=${{ env.STATUS_COMMENT_ID }}
            ```
            5. Update status after spawning: ./scripts/bash/update_status_comment.sh ${{ github.event.client_payload.issue_number }} "processing" "Child agents executing (N spawned)..." "gitaiteams/issue-${{ github.event.client_payload.issue_number }}"

            Remember:
            - Max 5 child agents (constitution limit)
            - No grandchildren (single-level parallelism only)
            - Stateless architecture (no STATE.json)
            - Branch naming: gitaiteams/issue-N and gitaiteams/issue-N-child-M

            Execute the appropriate commands based on your analysis of the task.