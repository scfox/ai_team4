name: AI Task Router
# T016: Detects @gitaiteams mentions and triggers orchestrator

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  route:
    name: Route AI Task
    runs-on: ubuntu-latest

    # Only run if @gitaiteams is mentioned in issue body or comment
    if: |
      github.event.issue.pull_request == null &&
      (
        (github.event_name == 'issues' && contains(github.event.issue.body, '@gitaiteams')) ||
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@gitaiteams'))
      )

    permissions:
      contents: read
      issues: write
      actions: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add eyes reaction
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Add eyes reaction to acknowledge mention
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            gh api --method POST \
              "/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions" \
              -f content='eyes' || echo "Failed to add reaction"
          else
            # For issues, add reaction to the issue itself
            gh api --method POST \
              "/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/reactions" \
              -f content='eyes' || echo "Failed to add reaction"
          fi

      - name: Add trigger label
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Add label to track AI tasks
          gh issue edit ${{ github.event.issue.number }} \
            --add-label "trigger:ai-task" || echo "Label might already exist"

      - name: Prepare task text
        id: prepare-task
        run: |
          # Get the task text based on event type
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            TASK_TEXT="${{ github.event.comment.body }}"
          else
            TASK_TEXT="${{ github.event.issue.body }}"
          fi

          # Escape the task text for JSON (handle quotes, newlines, backslashes)
          ESCAPED_TASK=$(echo "$TASK_TEXT" | jq -Rs .)

          # Save to output
          echo "task<<EOF" >> $GITHUB_OUTPUT
          echo "$ESCAPED_TASK" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Trigger orchestrator via Claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          claude_args: |
            --allowed-tools Bash(gh:*)
          prompt: |
            You are the GitAI Teams router. A user mentioned @gitaiteams in issue #${{ github.event.issue.number }}.

            CRITICAL: You must trigger the orchestrator using repository_dispatch.

            Issue Number: ${{ github.event.issue.number }}
            Comment ID: ${{ github.event_name == 'issue_comment' && github.event.comment.id || 'none' }}

            Execute this gh command to trigger the orchestrator:
            ```bash
            # Create proper JSON payload using jq to avoid escaping issues
            PAYLOAD=$(jq -n \
              --arg issue_number "${{ github.event.issue.number }}" \
              --arg comment_id "${{ github.event_name == 'issue_comment' && github.event.comment.id || 0 }}" \
              --argjson task ${{ steps.prepare-task.outputs.task }} \
              '{issue_number: $issue_number, comment_id: $comment_id, task: $task}')

            gh api "repos/${{ github.repository }}/dispatches" \
              --method POST \
              -f event_type="orchestrate_task" \
              -f "client_payload=$PAYLOAD"
            ```

            This will trigger the ai-task-orchestrator workflow to handle the task.

            IMPORTANT: You MUST execute the gh api command above. The CLAUDE_CODE_OAUTH_TOKEN is already available in your environment.

  # T016: Check for child completions in comments
  check-completions:
    name: Check for Child Completions
    runs-on: ubuntu-latest

    # Only run on child completion comments (not analysis comments)
    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request == null &&
      contains(github.event.comment.body, 'ðŸ¤– Child') &&
      !contains(github.event.comment.body, 'ðŸ¤– Completion Analysis')

    permissions:
      contents: read
      issues: read
      actions: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Get issue comments
        id: get-comments
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get all comments for the issue
          COMMENTS=$(gh api "repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments" --paginate)
          echo "comments<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMENTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Get issue body for expected count
          ISSUE_BODY=$(gh api "repos/${{ github.repository }}/issues/${{ github.event.issue.number }}" --jq '.body')
          echo "issue_body<<EOF" >> $GITHUB_OUTPUT
          echo "$ISSUE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Count completions
        id: count
        env:
          COMMENTS_JSON: ${{ steps.get-comments.outputs.comments }}
          ISSUE_BODY_TEXT: ${{ steps.get-comments.outputs.issue_body }}
        run: |
          # Debug: Check Python availability and current directory
          echo "Current directory: $(pwd)"
          echo "Python version: $(python3 --version)"
          echo "Script exists: $(ls -la scripts/python/count_completions.py 2>&1)"

          # Save comments and issue body to temp files using environment variables
          # This avoids issues with heredoc and special characters
          echo "$COMMENTS_JSON" > /tmp/comments.json
          echo "$ISSUE_BODY_TEXT" > /tmp/issue_body.txt

          # Verify the files were created correctly
          echo "Comments file size: $(wc -c < /tmp/comments.json)"
          echo "Issue body file size: $(wc -c < /tmp/issue_body.txt)"

          # Debug: Check if JSON is valid
          if jq . /tmp/comments.json >/dev/null 2>&1; then
            echo "Comments JSON is valid"
          else
            echo "Comments JSON is invalid, showing first 200 chars:"
            head -c 200 /tmp/comments.json
          fi

          # Run the count_completions script with file inputs (use python3 explicitly)
          RESULT=$(python3 scripts/python/count_completions.py \
            --comments "$(cat /tmp/comments.json)" \
            --issue-body "$(cat /tmp/issue_body.txt)" \
            --threshold 3 \
            --debug)

          echo "Result: $RESULT"

          # Parse the JSON result
          CHILD_COUNT=$(echo "$RESULT" | jq -r '.child_count')
          THRESHOLD_MET=$(echo "$RESULT" | jq -r '.threshold_met')
          EXPECTED_COUNT=$(echo "$RESULT" | jq -r '.expected_count')

          echo "child_count=$CHILD_COUNT" >> $GITHUB_OUTPUT
          echo "threshold_met=$THRESHOLD_MET" >> $GITHUB_OUTPUT
          echo "expected_count=$EXPECTED_COUNT" >> $GITHUB_OUTPUT

      - name: Check if analysis already exists
        if: steps.count.outputs.threshold_met == 'true'
        id: check-analysis
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if completion analysis comment already exists
          ANALYSIS_EXISTS=$(echo '${{ steps.get-comments.outputs.comments }}' | jq -r '.[] | select(.body | contains("ðŸ¤– Completion Analysis")) | .id' | wc -l)
          echo "analysis_exists=$ANALYSIS_EXISTS" >> $GITHUB_OUTPUT
          echo "Analysis comments found: $ANALYSIS_EXISTS"

      - name: Trigger completion analysis
        if: steps.count.outputs.threshold_met == 'true' && steps.check-analysis.outputs.analysis_exists == '0'
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          claude_args: |
            --allowed-tools Bash(gh:*)
          prompt: |
            # T018: Trigger completion analysis via repository_dispatch

            Child completion threshold has been met for issue #${{ github.event.issue.number }}.

            Child Count: ${{ steps.count.outputs.child_count }}
            Expected Count: ${{ steps.count.outputs.expected_count }}

            Execute this command to trigger the completion analyzer:
            ```bash
            gh api "repos/${{ github.repository }}/dispatches" \
              --method POST \
              -f event_type="analyze_completions" \
              -f client_payload='{
                "issue_number": "${{ github.event.issue.number }}",
                "child_count": "${{ steps.count.outputs.child_count }}",
                "expected_count": "${{ steps.count.outputs.expected_count }}"
              }'
            ```

            This will trigger the ai-completion-analyzer workflow to analyze child completions.