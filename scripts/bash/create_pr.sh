#!/usr/bin/env bash
# T020: Create PR with proper formatting
# Follows constitution PR format requirements

set -euo pipefail

# Function to create a properly formatted PR
create_pr() {
    local source_branch=${1:?Source branch required}
    local target_branch=${2:?Target branch required}
    local issue_number=${3:?Issue number required}
    local description=${4:-"Task completed"}
    local pr_type=${5:-"child"}  # "child" or "root"

    # Validate branch patterns
    if [[ ! "$source_branch" =~ ^gitaiteams/issue-[0-9]+(-child-[0-9]+)?$ ]]; then
        echo "Error: Invalid source branch pattern: $source_branch" >&2
        return 1
    fi

    # Determine PR title based on type
    local pr_title
    if [[ "$pr_type" == "child" ]]; then
        # Extract child number from branch name
        if [[ "$source_branch" =~ -child-([0-9]+)$ ]]; then
            local child_num="${BASH_REMATCH[1]}"
            pr_title="[AI Agent] Issue #${issue_number}: Child ${child_num} results"
        else
            pr_title="[AI Agent] Issue #${issue_number}: Results"
        fi
    else
        pr_title="[AI Agent] Issue #${issue_number}: ${description}"
    fi

    # Create PR body
    local pr_body
    pr_body=$(cat << EOF
## AI Agent Results

**Issue**: #${issue_number}
**Branch**: ${source_branch}
**Type**: ${pr_type}

### Description
${description}

### Files Changed
- See RESULTS.md for detailed findings

### Verification
- [ ] Trace compliance verified
- [ ] No state files created
- [ ] Branch naming correct
- [ ] All tests passing

---
*Generated by GitAI Teams automation*
EOF
)

    echo "Creating PR from ${source_branch} to ${target_branch}"
    echo "Title: ${pr_title}"

    # Create the PR
    gh pr create \
        --base "${target_branch}" \
        --head "${source_branch}" \
        --title "${pr_title}" \
        --body "${pr_body}" \
        --label "ai-generated"

    if [[ $? -eq 0 ]]; then
        echo "âœ“ Successfully created PR"

        # Get PR number for reference
        local pr_number=$(gh pr list --head "${source_branch}" --json number --jq '.[0].number')
        echo "PR #${pr_number} created"

        return 0
    else
        echo "âœ— Failed to create PR" >&2
        return 1
    fi
}

# Function to create PR link (not auto-create) for parent to main
create_pr_link() {
    local source_branch=${1:?Source branch required}
    local issue_number=${2:?Issue number required}

    # Generate PR creation URL
    local repo_url="https://github.com/${GITHUB_REPOSITORY:-${GITHUB_REPOSITORY}}"
    local pr_url="${repo_url}/compare/main...${source_branch}?quick_pull=1"

    # Title for the PR (URL encoded)
    local pr_title="[AI Agent] Issue #${issue_number}: Task completed"
    pr_title=$(echo "$pr_title" | sed 's/ /%20/g')

    pr_url="${pr_url}&title=${pr_title}"

    echo ""
    echo "ðŸ“‹ **Ready to create PR to main**"
    echo ""
    echo "Click here to create the PR: [Create Pull Request](${pr_url})"
    echo ""
    echo "This allows you to:"
    echo "- Review the changes before merging"
    echo "- Choose a different target branch if needed"
    echo "- Add additional context to the PR"
}

# Main execution
main() {
    local action=${1:-create}

    case "$action" in
        create)
            if [[ $# -lt 4 ]]; then
                echo "Usage: $0 create <source_branch> <target_branch> <issue_number> [description] [type]"
                exit 1
            fi
            shift
            create_pr "$@"
            ;;
        link)
            if [[ $# -lt 3 ]]; then
                echo "Usage: $0 link <source_branch> <issue_number>"
                exit 1
            fi
            shift
            create_pr_link "$@"
            ;;
        *)
            echo "Unknown action: $action"
            echo "Use 'create' or 'link'"
            exit 1
            ;;
    esac
}

# Run if not sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # Ensure we have GH token
    if [[ -z "${GH_TOKEN:-${GITHUB_TOKEN:-}}" ]]; then
        echo "Error: GH_TOKEN or GITHUB_TOKEN required" >&2
        exit 1
    fi

    main "$@"
fi